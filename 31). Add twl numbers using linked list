PROBLEM: You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their
nodes contains a single digit. Add the two numbers and return the sum as a linked list.

LANGUAGE: JAVA

SOL:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        ListNode ret = new ListNode(0);
ListNode opr = new ListNode(0);
opr = ret;
int sum = 0;

 while(l1 != null || l2 != null || sum != 0){
     if(l1 != null){
         sum = sum + l1.val;
         l1 = l1.next;
     }
     if(l2 != null){
         sum = sum + l2.val;
         l2 = l2.next;
     }
     opr.next = new ListNode(sum%10);
     sum = sum/10;
     opr = opr.next;
 }
 return ret.next;
        
    }
}

TEST CASE 1
INPUT: l1 = [2,4,3], l2 = [5,6,4]
OUTPUT: [7,0,8]
EXPLANATION: 342 + 465 = 807.

TEST CASE 2
INPUT: l1 = [0], l2 = [0]
OUTPUT: [0]
